in package test

// Enumeration for testing
enum Color:/ Black, Red, White, Blue

// Bitmask for testing
bitmask Recipe:/ HasSugar, HasSalt, HasPepper

struct s_bool:/
    m: bool
    n: bool

struct s_char:/
    m: char
    n: char

struct s_uint8:/
    m: uint8
    n: uint8

struct s_uint16:/
    m: uint16
    n: uint16

struct s_uint32:/
    m: uint32
    n: uint32

struct s_uint64:/
    m: uint64
    n: uint64

struct s_int8:/
    m: int8
    n: int8

struct s_int16:/
    m: int16
    n: int16

struct s_int32:/
    m: int32
    n: int32

struct s_int64:/
    m: int64
    n: int64

struct s_float32:/
    m: float32
    n: float32

struct s_float64:/
    m: float64
    n: float64

struct s_string:/
    m: string
    n: string

struct s_octet:/
    m: int64
    n: int64

struct s_word:/
    m: float32
    n: float32

struct s_enum:/
    m: test/Color
    n: test/Color

struct s_bitmask:/
    m: test/Recipe
    n: test/Recipe

struct s_point:/
    x, y: int32

struct s_line:/
    start, stop: s_point

struct s_nested_enum:/
    a, b: s_enum

struct s_array:/
    a, b: array{int32, 3}

struct s_sequence:/
    a, b: sequence{int32}

struct s_list:/
    a, b: list{int32}

struct s_array_enum:/
    a, b: array{Color, 3}

struct s_sequence_enum:/
    a, b: sequence{Color}

struct s_list_enum:/
    a, b: list{Color}

test/suite primitive:/
    void tc_bool()
    void tc_char()
    void tc_uint8()
    void tc_uint16()
    void tc_uint32()
    void tc_uint64()
    void tc_int8()
    void tc_int16()
    void tc_int32()
    void tc_int64()
    void tc_float32()
    void tc_float64()
    void tc_string()
    void tc_octet()
    void tc_word()
    void tc_enum()
    void tc_bitmask()

test/suite primitive_two_values:/
    void tc_bool()
    void tc_char()
    void tc_uint8()
    void tc_uint16()
    void tc_uint32()
    void tc_uint64()
    void tc_int8()
    void tc_int16()
    void tc_int32()
    void tc_int64()
    void tc_float32()
    void tc_float64()
    void tc_string()
    void tc_octet()
    void tc_word()
    void tc_enum()
    void tc_bitmask()

test/suite primitive_member_two_values:/
    void tc_bool()
    void tc_char()
    void tc_uint8()
    void tc_uint16()
    void tc_uint32()
    void tc_uint64()
    void tc_int8()
    void tc_int16()
    void tc_int32()
    void tc_int64()
    void tc_float32()
    void tc_float64()
    void tc_string()
    void tc_octet()
    void tc_word()
    void tc_enum()
    void tc_bitmask()

test/suite nested_composite_primitive:/
    void tc_full_init()
    void tc_partial_init()
    void tc_empty_init()
    void tc_member_full_init()
    void tc_member_partial_init()
    void tc_member_empty_init()
    void tc_mixed_full_init()
    void tc_mixed_partial_init()
    void tc_mixed_empty_init()

    void tc_init_enum()
    void tc_member_init_enum()
    void tc_mixed_init_enum()

    void tc_init_bitmask()
    void tc_member_init_bitmask()
    void tc_mixed_init_bitmask()

test/suite nested_collection_primitive:/
    void tc_array_empty_init()
    void tc_array_partial_init()
    void tc_array_full_init()
    void tc_array_init_enum()
    void tc_array_init_bitmask()
    void tc_sequence_empty_init()
    void tc_sequence_1_init()
    void tc_sequence_3_init()
    void tc_sequence_init_enum()
    void tc_sequence_init_bitmask()
    void tc_list_null_init()
    void tc_list_empty_init()
    void tc_list_1_init()
    void tc_list_3_init()
    void tc_list_init_enum()
    void tc_list_init_bitmask()
